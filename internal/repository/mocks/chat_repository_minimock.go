package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/Sysleec/chat-server/internal/repository.ChatRepository -o chat_repository_minimock.go -n ChatRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Sysleec/chat-server/internal/model"
	"github.com/gojuno/minimock/v3"
	"google.golang.org/protobuf/types/known/emptypb"
)

// ChatRepositoryMock implements repository.ChatRepository
type ChatRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateChat          func(ctx context.Context, in *emptypb.Empty) (i1 int64, err error)
	inspectFuncCreateChat   func(ctx context.Context, in *emptypb.Empty)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mChatRepositoryMockCreateChat

	funcDeleteChat          func(ctx context.Context, cht *model.Chat) (ep1 *emptypb.Empty, err error)
	inspectFuncDeleteChat   func(ctx context.Context, cht *model.Chat)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mChatRepositoryMockDeleteChat

	funcGetChat          func(ctx context.Context, id int64) (cp1 *model.Chat, err error)
	inspectFuncGetChat   func(ctx context.Context, id int64)
	afterGetChatCounter  uint64
	beforeGetChatCounter uint64
	GetChatMock          mChatRepositoryMockGetChat

	funcGetChats          func(ctx context.Context, in *emptypb.Empty) (ca1 []model.Chat, err error)
	inspectFuncGetChats   func(ctx context.Context, in *emptypb.Empty)
	afterGetChatsCounter  uint64
	beforeGetChatsCounter uint64
	GetChatsMock          mChatRepositoryMockGetChats
}

// NewChatRepositoryMock returns a mock for repository.ChatRepository
func NewChatRepositoryMock(t minimock.Tester) *ChatRepositoryMock {
	m := &ChatRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateChatMock = mChatRepositoryMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*ChatRepositoryMockCreateChatParams{}

	m.DeleteChatMock = mChatRepositoryMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*ChatRepositoryMockDeleteChatParams{}

	m.GetChatMock = mChatRepositoryMockGetChat{mock: m}
	m.GetChatMock.callArgs = []*ChatRepositoryMockGetChatParams{}

	m.GetChatsMock = mChatRepositoryMockGetChats{mock: m}
	m.GetChatsMock.callArgs = []*ChatRepositoryMockGetChatsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatRepositoryMockCreateChat struct {
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateChatExpectation
	expectations       []*ChatRepositoryMockCreateChatExpectation

	callArgs []*ChatRepositoryMockCreateChatParams
	mutex    sync.RWMutex
}

// ChatRepositoryMockCreateChatExpectation specifies expectation struct of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectation struct {
	mock    *ChatRepositoryMock
	params  *ChatRepositoryMockCreateChatParams
	results *ChatRepositoryMockCreateChatResults
	Counter uint64
}

// ChatRepositoryMockCreateChatParams contains parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParams struct {
	ctx context.Context
	in  *emptypb.Empty
}

// ChatRepositoryMockCreateChatResults contains results of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Expect(ctx context.Context, in *emptypb.Empty) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	mmCreateChat.defaultExpectation.params = &ChatRepositoryMockCreateChatParams{ctx, in}
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Inspect(f func(ctx context.Context, in *emptypb.Empty)) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Return(i1 int64, err error) *ChatRepositoryMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &ChatRepositoryMockCreateChatResults{i1, err}
	return mmCreateChat.mock
}

// Set uses given function f to mock the ChatRepository.CreateChat method
func (mmCreateChat *mChatRepositoryMockCreateChat) Set(f func(ctx context.Context, in *emptypb.Empty) (i1 int64, err error)) *ChatRepositoryMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	return mmCreateChat.mock
}

// When sets expectation for the ChatRepository.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mChatRepositoryMockCreateChat) When(ctx context.Context, in *emptypb.Empty) *ChatRepositoryMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateChatExpectation{
		mock:   mmCreateChat.mock,
		params: &ChatRepositoryMockCreateChatParams{ctx, in},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateChatExpectation) Then(i1 int64, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateChatResults{i1, err}
	return e.mock
}

// CreateChat implements repository.ChatRepository
func (mmCreateChat *ChatRepositoryMock) CreateChat(ctx context.Context, in *emptypb.Empty) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, in)
	}

	mm_params := ChatRepositoryMockCreateChatParams{ctx, in}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_got := ChatRepositoryMockCreateChatParams{ctx, in}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the ChatRepositoryMock.CreateChat")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, in)
	}
	mmCreateChat.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateChat. %v %v", ctx, in)
	return
}

// CreateChatAfterCounter returns a count of finished ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mChatRepositoryMockCreateChat) Calls() []*ChatRepositoryMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateChatDone() bool {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateChatCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && mm_atomic.LoadUint64(&m.afterCreateChatCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateChatCounter) < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatRepositoryMock.CreateChat")
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat with params: %#v", *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && mm_atomic.LoadUint64(&m.afterCreateChatCounter) < 1 {
		m.t.Error("Expected call to ChatRepositoryMock.CreateChat")
	}
}

type mChatRepositoryMockDeleteChat struct {
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockDeleteChatExpectation
	expectations       []*ChatRepositoryMockDeleteChatExpectation

	callArgs []*ChatRepositoryMockDeleteChatParams
	mutex    sync.RWMutex
}

// ChatRepositoryMockDeleteChatExpectation specifies expectation struct of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatExpectation struct {
	mock    *ChatRepositoryMock
	params  *ChatRepositoryMockDeleteChatParams
	results *ChatRepositoryMockDeleteChatResults
	Counter uint64
}

// ChatRepositoryMockDeleteChatParams contains parameters of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatParams struct {
	ctx context.Context
	cht *model.Chat
}

// ChatRepositoryMockDeleteChatResults contains results of the ChatRepository.DeleteChat
type ChatRepositoryMockDeleteChatResults struct {
	ep1 *emptypb.Empty
	err error
}

// Expect sets up expected params for ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Expect(ctx context.Context, cht *model.Chat) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{}
	}

	mmDeleteChat.defaultExpectation.params = &ChatRepositoryMockDeleteChatParams{ctx, cht}
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Inspect(f func(ctx context.Context, cht *model.Chat)) *mChatRepositoryMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by ChatRepository.DeleteChat
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Return(ep1 *emptypb.Empty, err error) *ChatRepositoryMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatRepositoryMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &ChatRepositoryMockDeleteChatResults{ep1, err}
	return mmDeleteChat.mock
}

// Set uses given function f to mock the ChatRepository.DeleteChat method
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Set(f func(ctx context.Context, cht *model.Chat) (ep1 *emptypb.Empty, err error)) *ChatRepositoryMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	return mmDeleteChat.mock
}

// When sets expectation for the ChatRepository.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mChatRepositoryMockDeleteChat) When(ctx context.Context, cht *model.Chat) *ChatRepositoryMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatRepositoryMock.DeleteChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockDeleteChatExpectation{
		mock:   mmDeleteChat.mock,
		params: &ChatRepositoryMockDeleteChatParams{ctx, cht},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.DeleteChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockDeleteChatExpectation) Then(ep1 *emptypb.Empty, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockDeleteChatResults{ep1, err}
	return e.mock
}

// DeleteChat implements repository.ChatRepository
func (mmDeleteChat *ChatRepositoryMock) DeleteChat(ctx context.Context, cht *model.Chat) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, cht)
	}

	mm_params := ChatRepositoryMockDeleteChatParams{ctx, cht}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_got := ChatRepositoryMockDeleteChatParams{ctx, cht}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("ChatRepositoryMock.DeleteChat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the ChatRepositoryMock.DeleteChat")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, cht)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to ChatRepositoryMock.DeleteChat. %v %v", ctx, cht)
	return
}

// DeleteChatAfterCounter returns a count of finished ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of ChatRepositoryMock.DeleteChat invocations
func (mmDeleteChat *ChatRepositoryMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mChatRepositoryMockDeleteChat) Calls() []*ChatRepositoryMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockDeleteChatDone() bool {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteChatCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && mm_atomic.LoadUint64(&m.afterDeleteChatCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteChatCounter) < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatRepositoryMock.DeleteChat")
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.DeleteChat with params: %#v", *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && mm_atomic.LoadUint64(&m.afterDeleteChatCounter) < 1 {
		m.t.Error("Expected call to ChatRepositoryMock.DeleteChat")
	}
}

type mChatRepositoryMockGetChat struct {
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockGetChatExpectation
	expectations       []*ChatRepositoryMockGetChatExpectation

	callArgs []*ChatRepositoryMockGetChatParams
	mutex    sync.RWMutex
}

// ChatRepositoryMockGetChatExpectation specifies expectation struct of the ChatRepository.GetChat
type ChatRepositoryMockGetChatExpectation struct {
	mock    *ChatRepositoryMock
	params  *ChatRepositoryMockGetChatParams
	results *ChatRepositoryMockGetChatResults
	Counter uint64
}

// ChatRepositoryMockGetChatParams contains parameters of the ChatRepository.GetChat
type ChatRepositoryMockGetChatParams struct {
	ctx context.Context
	id  int64
}

// ChatRepositoryMockGetChatResults contains results of the ChatRepository.GetChat
type ChatRepositoryMockGetChatResults struct {
	cp1 *model.Chat
	err error
}

// Expect sets up expected params for ChatRepository.GetChat
func (mmGetChat *mChatRepositoryMockGetChat) Expect(ctx context.Context, id int64) *mChatRepositoryMockGetChat {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("ChatRepositoryMock.GetChat mock is already set by Set")
	}

	if mmGetChat.defaultExpectation == nil {
		mmGetChat.defaultExpectation = &ChatRepositoryMockGetChatExpectation{}
	}

	mmGetChat.defaultExpectation.params = &ChatRepositoryMockGetChatParams{ctx, id}
	for _, e := range mmGetChat.expectations {
		if minimock.Equal(e.params, mmGetChat.defaultExpectation.params) {
			mmGetChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChat.defaultExpectation.params)
		}
	}

	return mmGetChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.GetChat
func (mmGetChat *mChatRepositoryMockGetChat) Inspect(f func(ctx context.Context, id int64)) *mChatRepositoryMockGetChat {
	if mmGetChat.mock.inspectFuncGetChat != nil {
		mmGetChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.GetChat")
	}

	mmGetChat.mock.inspectFuncGetChat = f

	return mmGetChat
}

// Return sets up results that will be returned by ChatRepository.GetChat
func (mmGetChat *mChatRepositoryMockGetChat) Return(cp1 *model.Chat, err error) *ChatRepositoryMock {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("ChatRepositoryMock.GetChat mock is already set by Set")
	}

	if mmGetChat.defaultExpectation == nil {
		mmGetChat.defaultExpectation = &ChatRepositoryMockGetChatExpectation{mock: mmGetChat.mock}
	}
	mmGetChat.defaultExpectation.results = &ChatRepositoryMockGetChatResults{cp1, err}
	return mmGetChat.mock
}

// Set uses given function f to mock the ChatRepository.GetChat method
func (mmGetChat *mChatRepositoryMockGetChat) Set(f func(ctx context.Context, id int64) (cp1 *model.Chat, err error)) *ChatRepositoryMock {
	if mmGetChat.defaultExpectation != nil {
		mmGetChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.GetChat method")
	}

	if len(mmGetChat.expectations) > 0 {
		mmGetChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.GetChat method")
	}

	mmGetChat.mock.funcGetChat = f
	return mmGetChat.mock
}

// When sets expectation for the ChatRepository.GetChat which will trigger the result defined by the following
// Then helper
func (mmGetChat *mChatRepositoryMockGetChat) When(ctx context.Context, id int64) *ChatRepositoryMockGetChatExpectation {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("ChatRepositoryMock.GetChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockGetChatExpectation{
		mock:   mmGetChat.mock,
		params: &ChatRepositoryMockGetChatParams{ctx, id},
	}
	mmGetChat.expectations = append(mmGetChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.GetChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockGetChatExpectation) Then(cp1 *model.Chat, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockGetChatResults{cp1, err}
	return e.mock
}

// GetChat implements repository.ChatRepository
func (mmGetChat *ChatRepositoryMock) GetChat(ctx context.Context, id int64) (cp1 *model.Chat, err error) {
	mm_atomic.AddUint64(&mmGetChat.beforeGetChatCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChat.afterGetChatCounter, 1)

	if mmGetChat.inspectFuncGetChat != nil {
		mmGetChat.inspectFuncGetChat(ctx, id)
	}

	mm_params := ChatRepositoryMockGetChatParams{ctx, id}

	// Record call args
	mmGetChat.GetChatMock.mutex.Lock()
	mmGetChat.GetChatMock.callArgs = append(mmGetChat.GetChatMock.callArgs, &mm_params)
	mmGetChat.GetChatMock.mutex.Unlock()

	for _, e := range mmGetChat.GetChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGetChat.GetChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChat.GetChatMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChat.GetChatMock.defaultExpectation.params
		mm_got := ChatRepositoryMockGetChatParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChat.t.Errorf("ChatRepositoryMock.GetChat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChat.GetChatMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChat.t.Fatal("No results are set for the ChatRepositoryMock.GetChat")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGetChat.funcGetChat != nil {
		return mmGetChat.funcGetChat(ctx, id)
	}
	mmGetChat.t.Fatalf("Unexpected call to ChatRepositoryMock.GetChat. %v %v", ctx, id)
	return
}

// GetChatAfterCounter returns a count of finished ChatRepositoryMock.GetChat invocations
func (mmGetChat *ChatRepositoryMock) GetChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChat.afterGetChatCounter)
}

// GetChatBeforeCounter returns a count of ChatRepositoryMock.GetChat invocations
func (mmGetChat *ChatRepositoryMock) GetChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChat.beforeGetChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.GetChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChat *mChatRepositoryMockGetChat) Calls() []*ChatRepositoryMockGetChatParams {
	mmGetChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockGetChatParams, len(mmGetChat.callArgs))
	copy(argCopy, mmGetChat.callArgs)

	mmGetChat.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatDone returns true if the count of the GetChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockGetChatDone() bool {
	for _, e := range m.GetChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChat != nil && mm_atomic.LoadUint64(&m.afterGetChatCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockGetChatInspect() {
	for _, e := range m.GetChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChat with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatCounter) < 1 {
		if m.GetChatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatRepositoryMock.GetChat")
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChat with params: %#v", *m.GetChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChat != nil && mm_atomic.LoadUint64(&m.afterGetChatCounter) < 1 {
		m.t.Error("Expected call to ChatRepositoryMock.GetChat")
	}
}

type mChatRepositoryMockGetChats struct {
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockGetChatsExpectation
	expectations       []*ChatRepositoryMockGetChatsExpectation

	callArgs []*ChatRepositoryMockGetChatsParams
	mutex    sync.RWMutex
}

// ChatRepositoryMockGetChatsExpectation specifies expectation struct of the ChatRepository.GetChats
type ChatRepositoryMockGetChatsExpectation struct {
	mock    *ChatRepositoryMock
	params  *ChatRepositoryMockGetChatsParams
	results *ChatRepositoryMockGetChatsResults
	Counter uint64
}

// ChatRepositoryMockGetChatsParams contains parameters of the ChatRepository.GetChats
type ChatRepositoryMockGetChatsParams struct {
	ctx context.Context
	in  *emptypb.Empty
}

// ChatRepositoryMockGetChatsResults contains results of the ChatRepository.GetChats
type ChatRepositoryMockGetChatsResults struct {
	ca1 []model.Chat
	err error
}

// Expect sets up expected params for ChatRepository.GetChats
func (mmGetChats *mChatRepositoryMockGetChats) Expect(ctx context.Context, in *emptypb.Empty) *mChatRepositoryMockGetChats {
	if mmGetChats.mock.funcGetChats != nil {
		mmGetChats.mock.t.Fatalf("ChatRepositoryMock.GetChats mock is already set by Set")
	}

	if mmGetChats.defaultExpectation == nil {
		mmGetChats.defaultExpectation = &ChatRepositoryMockGetChatsExpectation{}
	}

	mmGetChats.defaultExpectation.params = &ChatRepositoryMockGetChatsParams{ctx, in}
	for _, e := range mmGetChats.expectations {
		if minimock.Equal(e.params, mmGetChats.defaultExpectation.params) {
			mmGetChats.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChats.defaultExpectation.params)
		}
	}

	return mmGetChats
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.GetChats
func (mmGetChats *mChatRepositoryMockGetChats) Inspect(f func(ctx context.Context, in *emptypb.Empty)) *mChatRepositoryMockGetChats {
	if mmGetChats.mock.inspectFuncGetChats != nil {
		mmGetChats.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.GetChats")
	}

	mmGetChats.mock.inspectFuncGetChats = f

	return mmGetChats
}

// Return sets up results that will be returned by ChatRepository.GetChats
func (mmGetChats *mChatRepositoryMockGetChats) Return(ca1 []model.Chat, err error) *ChatRepositoryMock {
	if mmGetChats.mock.funcGetChats != nil {
		mmGetChats.mock.t.Fatalf("ChatRepositoryMock.GetChats mock is already set by Set")
	}

	if mmGetChats.defaultExpectation == nil {
		mmGetChats.defaultExpectation = &ChatRepositoryMockGetChatsExpectation{mock: mmGetChats.mock}
	}
	mmGetChats.defaultExpectation.results = &ChatRepositoryMockGetChatsResults{ca1, err}
	return mmGetChats.mock
}

// Set uses given function f to mock the ChatRepository.GetChats method
func (mmGetChats *mChatRepositoryMockGetChats) Set(f func(ctx context.Context, in *emptypb.Empty) (ca1 []model.Chat, err error)) *ChatRepositoryMock {
	if mmGetChats.defaultExpectation != nil {
		mmGetChats.mock.t.Fatalf("Default expectation is already set for the ChatRepository.GetChats method")
	}

	if len(mmGetChats.expectations) > 0 {
		mmGetChats.mock.t.Fatalf("Some expectations are already set for the ChatRepository.GetChats method")
	}

	mmGetChats.mock.funcGetChats = f
	return mmGetChats.mock
}

// When sets expectation for the ChatRepository.GetChats which will trigger the result defined by the following
// Then helper
func (mmGetChats *mChatRepositoryMockGetChats) When(ctx context.Context, in *emptypb.Empty) *ChatRepositoryMockGetChatsExpectation {
	if mmGetChats.mock.funcGetChats != nil {
		mmGetChats.mock.t.Fatalf("ChatRepositoryMock.GetChats mock is already set by Set")
	}

	expectation := &ChatRepositoryMockGetChatsExpectation{
		mock:   mmGetChats.mock,
		params: &ChatRepositoryMockGetChatsParams{ctx, in},
	}
	mmGetChats.expectations = append(mmGetChats.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.GetChats return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockGetChatsExpectation) Then(ca1 []model.Chat, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockGetChatsResults{ca1, err}
	return e.mock
}

// GetChats implements repository.ChatRepository
func (mmGetChats *ChatRepositoryMock) GetChats(ctx context.Context, in *emptypb.Empty) (ca1 []model.Chat, err error) {
	mm_atomic.AddUint64(&mmGetChats.beforeGetChatsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChats.afterGetChatsCounter, 1)

	if mmGetChats.inspectFuncGetChats != nil {
		mmGetChats.inspectFuncGetChats(ctx, in)
	}

	mm_params := ChatRepositoryMockGetChatsParams{ctx, in}

	// Record call args
	mmGetChats.GetChatsMock.mutex.Lock()
	mmGetChats.GetChatsMock.callArgs = append(mmGetChats.GetChatsMock.callArgs, &mm_params)
	mmGetChats.GetChatsMock.mutex.Unlock()

	for _, e := range mmGetChats.GetChatsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ca1, e.results.err
		}
	}

	if mmGetChats.GetChatsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChats.GetChatsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChats.GetChatsMock.defaultExpectation.params
		mm_got := ChatRepositoryMockGetChatsParams{ctx, in}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChats.t.Errorf("ChatRepositoryMock.GetChats got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChats.GetChatsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChats.t.Fatal("No results are set for the ChatRepositoryMock.GetChats")
		}
		return (*mm_results).ca1, (*mm_results).err
	}
	if mmGetChats.funcGetChats != nil {
		return mmGetChats.funcGetChats(ctx, in)
	}
	mmGetChats.t.Fatalf("Unexpected call to ChatRepositoryMock.GetChats. %v %v", ctx, in)
	return
}

// GetChatsAfterCounter returns a count of finished ChatRepositoryMock.GetChats invocations
func (mmGetChats *ChatRepositoryMock) GetChatsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChats.afterGetChatsCounter)
}

// GetChatsBeforeCounter returns a count of ChatRepositoryMock.GetChats invocations
func (mmGetChats *ChatRepositoryMock) GetChatsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChats.beforeGetChatsCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.GetChats.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChats *mChatRepositoryMockGetChats) Calls() []*ChatRepositoryMockGetChatsParams {
	mmGetChats.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockGetChatsParams, len(mmGetChats.callArgs))
	copy(argCopy, mmGetChats.callArgs)

	mmGetChats.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatsDone returns true if the count of the GetChats invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockGetChatsDone() bool {
	for _, e := range m.GetChatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChats != nil && mm_atomic.LoadUint64(&m.afterGetChatsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetChatsInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockGetChatsInspect() {
	for _, e := range m.GetChatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChats with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatsCounter) < 1 {
		if m.GetChatsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatRepositoryMock.GetChats")
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChats with params: %#v", *m.GetChatsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChats != nil && mm_atomic.LoadUint64(&m.afterGetChatsCounter) < 1 {
		m.t.Error("Expected call to ChatRepositoryMock.GetChats")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateChatInspect()

			m.MinimockDeleteChatInspect()

			m.MinimockGetChatInspect()

			m.MinimockGetChatsInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateChatDone() &&
		m.MinimockDeleteChatDone() &&
		m.MinimockGetChatDone() &&
		m.MinimockGetChatsDone()
}
