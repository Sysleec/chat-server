package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/Sysleec/chat-server/internal/service.ChatService -o chat_service_minimock.go -n ChatServiceMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Sysleec/chat-server/internal/model"
	"github.com/gojuno/minimock/v3"
	"google.golang.org/protobuf/types/known/emptypb"
)

// ChatServiceMock implements service.ChatService
type ChatServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, cp1 *model.Chat) (i1 int64, err error)
	inspectFuncCreate   func(ctx context.Context, cp1 *model.Chat)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mChatServiceMockCreate

	funcCreateChat          func(ctx context.Context, in *emptypb.Empty) (i1 int64, err error)
	inspectFuncCreateChat   func(ctx context.Context, in *emptypb.Empty)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mChatServiceMockCreateChat

	funcDeleteChat          func(ctx context.Context, cht *model.Chat) (ep1 *emptypb.Empty, err error)
	inspectFuncDeleteChat   func(ctx context.Context, cht *model.Chat)
	afterDeleteChatCounter  uint64
	beforeDeleteChatCounter uint64
	DeleteChatMock          mChatServiceMockDeleteChat

	funcGetChat          func(ctx context.Context, id int64) (cp1 *model.Chat, err error)
	inspectFuncGetChat   func(ctx context.Context, id int64)
	afterGetChatCounter  uint64
	beforeGetChatCounter uint64
	GetChatMock          mChatServiceMockGetChat

	funcGetChats          func(ctx context.Context, in *emptypb.Empty) (ca1 []model.Chat, err error)
	inspectFuncGetChats   func(ctx context.Context, in *emptypb.Empty)
	afterGetChatsCounter  uint64
	beforeGetChatsCounter uint64
	GetChatsMock          mChatServiceMockGetChats

	funcGetName          func(ctx context.Context) (s1 string, err error)
	inspectFuncGetName   func(ctx context.Context)
	afterGetNameCounter  uint64
	beforeGetNameCounter uint64
	GetNameMock          mChatServiceMockGetName
}

// NewChatServiceMock returns a mock for service.ChatService
func NewChatServiceMock(t minimock.Tester) *ChatServiceMock {
	m := &ChatServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mChatServiceMockCreate{mock: m}
	m.CreateMock.callArgs = []*ChatServiceMockCreateParams{}

	m.CreateChatMock = mChatServiceMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*ChatServiceMockCreateChatParams{}

	m.DeleteChatMock = mChatServiceMockDeleteChat{mock: m}
	m.DeleteChatMock.callArgs = []*ChatServiceMockDeleteChatParams{}

	m.GetChatMock = mChatServiceMockGetChat{mock: m}
	m.GetChatMock.callArgs = []*ChatServiceMockGetChatParams{}

	m.GetChatsMock = mChatServiceMockGetChats{mock: m}
	m.GetChatsMock.callArgs = []*ChatServiceMockGetChatsParams{}

	m.GetNameMock = mChatServiceMockGetName{mock: m}
	m.GetNameMock.callArgs = []*ChatServiceMockGetNameParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatServiceMockCreate struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockCreateExpectation
	expectations       []*ChatServiceMockCreateExpectation

	callArgs []*ChatServiceMockCreateParams
	mutex    sync.RWMutex
}

// ChatServiceMockCreateExpectation specifies expectation struct of the ChatService.Create
type ChatServiceMockCreateExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockCreateParams
	results *ChatServiceMockCreateResults
	Counter uint64
}

// ChatServiceMockCreateParams contains parameters of the ChatService.Create
type ChatServiceMockCreateParams struct {
	ctx context.Context
	cp1 *model.Chat
}

// ChatServiceMockCreateResults contains results of the ChatService.Create
type ChatServiceMockCreateResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for ChatService.Create
func (mmCreate *mChatServiceMockCreate) Expect(ctx context.Context, cp1 *model.Chat) *mChatServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatServiceMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &ChatServiceMockCreateParams{ctx, cp1}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the ChatService.Create
func (mmCreate *mChatServiceMockCreate) Inspect(f func(ctx context.Context, cp1 *model.Chat)) *mChatServiceMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by ChatService.Create
func (mmCreate *mChatServiceMockCreate) Return(i1 int64, err error) *ChatServiceMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &ChatServiceMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &ChatServiceMockCreateResults{i1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the ChatService.Create method
func (mmCreate *mChatServiceMockCreate) Set(f func(ctx context.Context, cp1 *model.Chat) (i1 int64, err error)) *ChatServiceMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the ChatService.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the ChatService.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the ChatService.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mChatServiceMockCreate) When(ctx context.Context, cp1 *model.Chat) *ChatServiceMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("ChatServiceMock.Create mock is already set by Set")
	}

	expectation := &ChatServiceMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &ChatServiceMockCreateParams{ctx, cp1},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up ChatService.Create return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockCreateExpectation) Then(i1 int64, err error) *ChatServiceMock {
	e.results = &ChatServiceMockCreateResults{i1, err}
	return e.mock
}

// Create implements service.ChatService
func (mmCreate *ChatServiceMock) Create(ctx context.Context, cp1 *model.Chat) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, cp1)
	}

	mm_params := ChatServiceMockCreateParams{ctx, cp1}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := ChatServiceMockCreateParams{ctx, cp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("ChatServiceMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the ChatServiceMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, cp1)
	}
	mmCreate.t.Fatalf("Unexpected call to ChatServiceMock.Create. %v %v", ctx, cp1)
	return
}

// CreateAfterCounter returns a count of finished ChatServiceMock.Create invocations
func (mmCreate *ChatServiceMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of ChatServiceMock.Create invocations
func (mmCreate *ChatServiceMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mChatServiceMockCreate) Calls() []*ChatServiceMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*ChatServiceMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.Create")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.Create")
	}
}

type mChatServiceMockCreateChat struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockCreateChatExpectation
	expectations       []*ChatServiceMockCreateChatExpectation

	callArgs []*ChatServiceMockCreateChatParams
	mutex    sync.RWMutex
}

// ChatServiceMockCreateChatExpectation specifies expectation struct of the ChatService.CreateChat
type ChatServiceMockCreateChatExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockCreateChatParams
	results *ChatServiceMockCreateChatResults
	Counter uint64
}

// ChatServiceMockCreateChatParams contains parameters of the ChatService.CreateChat
type ChatServiceMockCreateChatParams struct {
	ctx context.Context
	in  *emptypb.Empty
}

// ChatServiceMockCreateChatResults contains results of the ChatService.CreateChat
type ChatServiceMockCreateChatResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for ChatService.CreateChat
func (mmCreateChat *mChatServiceMockCreateChat) Expect(ctx context.Context, in *emptypb.Empty) *mChatServiceMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatServiceMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatServiceMockCreateChatExpectation{}
	}

	mmCreateChat.defaultExpectation.params = &ChatServiceMockCreateChatParams{ctx, in}
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the ChatService.CreateChat
func (mmCreateChat *mChatServiceMockCreateChat) Inspect(f func(ctx context.Context, in *emptypb.Empty)) *mChatServiceMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by ChatService.CreateChat
func (mmCreateChat *mChatServiceMockCreateChat) Return(i1 int64, err error) *ChatServiceMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatServiceMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatServiceMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &ChatServiceMockCreateChatResults{i1, err}
	return mmCreateChat.mock
}

// Set uses given function f to mock the ChatService.CreateChat method
func (mmCreateChat *mChatServiceMockCreateChat) Set(f func(ctx context.Context, in *emptypb.Empty) (i1 int64, err error)) *ChatServiceMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the ChatService.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the ChatService.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	return mmCreateChat.mock
}

// When sets expectation for the ChatService.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mChatServiceMockCreateChat) When(ctx context.Context, in *emptypb.Empty) *ChatServiceMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatServiceMock.CreateChat mock is already set by Set")
	}

	expectation := &ChatServiceMockCreateChatExpectation{
		mock:   mmCreateChat.mock,
		params: &ChatServiceMockCreateChatParams{ctx, in},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up ChatService.CreateChat return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockCreateChatExpectation) Then(i1 int64, err error) *ChatServiceMock {
	e.results = &ChatServiceMockCreateChatResults{i1, err}
	return e.mock
}

// CreateChat implements service.ChatService
func (mmCreateChat *ChatServiceMock) CreateChat(ctx context.Context, in *emptypb.Empty) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, in)
	}

	mm_params := ChatServiceMockCreateChatParams{ctx, in}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_got := ChatServiceMockCreateChatParams{ctx, in}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("ChatServiceMock.CreateChat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the ChatServiceMock.CreateChat")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, in)
	}
	mmCreateChat.t.Fatalf("Unexpected call to ChatServiceMock.CreateChat. %v %v", ctx, in)
	return
}

// CreateChatAfterCounter returns a count of finished ChatServiceMock.CreateChat invocations
func (mmCreateChat *ChatServiceMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of ChatServiceMock.CreateChat invocations
func (mmCreateChat *ChatServiceMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mChatServiceMockCreateChat) Calls() []*ChatServiceMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*ChatServiceMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockCreateChatDone() bool {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateChatCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && mm_atomic.LoadUint64(&m.afterCreateChatCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.CreateChat with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateChatCounter) < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.CreateChat")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.CreateChat with params: %#v", *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && mm_atomic.LoadUint64(&m.afterCreateChatCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.CreateChat")
	}
}

type mChatServiceMockDeleteChat struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockDeleteChatExpectation
	expectations       []*ChatServiceMockDeleteChatExpectation

	callArgs []*ChatServiceMockDeleteChatParams
	mutex    sync.RWMutex
}

// ChatServiceMockDeleteChatExpectation specifies expectation struct of the ChatService.DeleteChat
type ChatServiceMockDeleteChatExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockDeleteChatParams
	results *ChatServiceMockDeleteChatResults
	Counter uint64
}

// ChatServiceMockDeleteChatParams contains parameters of the ChatService.DeleteChat
type ChatServiceMockDeleteChatParams struct {
	ctx context.Context
	cht *model.Chat
}

// ChatServiceMockDeleteChatResults contains results of the ChatService.DeleteChat
type ChatServiceMockDeleteChatResults struct {
	ep1 *emptypb.Empty
	err error
}

// Expect sets up expected params for ChatService.DeleteChat
func (mmDeleteChat *mChatServiceMockDeleteChat) Expect(ctx context.Context, cht *model.Chat) *mChatServiceMockDeleteChat {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatServiceMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatServiceMockDeleteChatExpectation{}
	}

	mmDeleteChat.defaultExpectation.params = &ChatServiceMockDeleteChatParams{ctx, cht}
	for _, e := range mmDeleteChat.expectations {
		if minimock.Equal(e.params, mmDeleteChat.defaultExpectation.params) {
			mmDeleteChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteChat.defaultExpectation.params)
		}
	}

	return mmDeleteChat
}

// Inspect accepts an inspector function that has same arguments as the ChatService.DeleteChat
func (mmDeleteChat *mChatServiceMockDeleteChat) Inspect(f func(ctx context.Context, cht *model.Chat)) *mChatServiceMockDeleteChat {
	if mmDeleteChat.mock.inspectFuncDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.DeleteChat")
	}

	mmDeleteChat.mock.inspectFuncDeleteChat = f

	return mmDeleteChat
}

// Return sets up results that will be returned by ChatService.DeleteChat
func (mmDeleteChat *mChatServiceMockDeleteChat) Return(ep1 *emptypb.Empty, err error) *ChatServiceMock {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatServiceMock.DeleteChat mock is already set by Set")
	}

	if mmDeleteChat.defaultExpectation == nil {
		mmDeleteChat.defaultExpectation = &ChatServiceMockDeleteChatExpectation{mock: mmDeleteChat.mock}
	}
	mmDeleteChat.defaultExpectation.results = &ChatServiceMockDeleteChatResults{ep1, err}
	return mmDeleteChat.mock
}

// Set uses given function f to mock the ChatService.DeleteChat method
func (mmDeleteChat *mChatServiceMockDeleteChat) Set(f func(ctx context.Context, cht *model.Chat) (ep1 *emptypb.Empty, err error)) *ChatServiceMock {
	if mmDeleteChat.defaultExpectation != nil {
		mmDeleteChat.mock.t.Fatalf("Default expectation is already set for the ChatService.DeleteChat method")
	}

	if len(mmDeleteChat.expectations) > 0 {
		mmDeleteChat.mock.t.Fatalf("Some expectations are already set for the ChatService.DeleteChat method")
	}

	mmDeleteChat.mock.funcDeleteChat = f
	return mmDeleteChat.mock
}

// When sets expectation for the ChatService.DeleteChat which will trigger the result defined by the following
// Then helper
func (mmDeleteChat *mChatServiceMockDeleteChat) When(ctx context.Context, cht *model.Chat) *ChatServiceMockDeleteChatExpectation {
	if mmDeleteChat.mock.funcDeleteChat != nil {
		mmDeleteChat.mock.t.Fatalf("ChatServiceMock.DeleteChat mock is already set by Set")
	}

	expectation := &ChatServiceMockDeleteChatExpectation{
		mock:   mmDeleteChat.mock,
		params: &ChatServiceMockDeleteChatParams{ctx, cht},
	}
	mmDeleteChat.expectations = append(mmDeleteChat.expectations, expectation)
	return expectation
}

// Then sets up ChatService.DeleteChat return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockDeleteChatExpectation) Then(ep1 *emptypb.Empty, err error) *ChatServiceMock {
	e.results = &ChatServiceMockDeleteChatResults{ep1, err}
	return e.mock
}

// DeleteChat implements service.ChatService
func (mmDeleteChat *ChatServiceMock) DeleteChat(ctx context.Context, cht *model.Chat) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmDeleteChat.beforeDeleteChatCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteChat.afterDeleteChatCounter, 1)

	if mmDeleteChat.inspectFuncDeleteChat != nil {
		mmDeleteChat.inspectFuncDeleteChat(ctx, cht)
	}

	mm_params := ChatServiceMockDeleteChatParams{ctx, cht}

	// Record call args
	mmDeleteChat.DeleteChatMock.mutex.Lock()
	mmDeleteChat.DeleteChatMock.callArgs = append(mmDeleteChat.DeleteChatMock.callArgs, &mm_params)
	mmDeleteChat.DeleteChatMock.mutex.Unlock()

	for _, e := range mmDeleteChat.DeleteChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmDeleteChat.DeleteChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteChat.DeleteChatMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteChat.DeleteChatMock.defaultExpectation.params
		mm_got := ChatServiceMockDeleteChatParams{ctx, cht}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteChat.t.Errorf("ChatServiceMock.DeleteChat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteChat.DeleteChatMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteChat.t.Fatal("No results are set for the ChatServiceMock.DeleteChat")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmDeleteChat.funcDeleteChat != nil {
		return mmDeleteChat.funcDeleteChat(ctx, cht)
	}
	mmDeleteChat.t.Fatalf("Unexpected call to ChatServiceMock.DeleteChat. %v %v", ctx, cht)
	return
}

// DeleteChatAfterCounter returns a count of finished ChatServiceMock.DeleteChat invocations
func (mmDeleteChat *ChatServiceMock) DeleteChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.afterDeleteChatCounter)
}

// DeleteChatBeforeCounter returns a count of ChatServiceMock.DeleteChat invocations
func (mmDeleteChat *ChatServiceMock) DeleteChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteChat.beforeDeleteChatCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.DeleteChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteChat *mChatServiceMockDeleteChat) Calls() []*ChatServiceMockDeleteChatParams {
	mmDeleteChat.mutex.RLock()

	argCopy := make([]*ChatServiceMockDeleteChatParams, len(mmDeleteChat.callArgs))
	copy(argCopy, mmDeleteChat.callArgs)

	mmDeleteChat.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteChatDone returns true if the count of the DeleteChat invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockDeleteChatDone() bool {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteChatCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && mm_atomic.LoadUint64(&m.afterDeleteChatCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteChatInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockDeleteChatInspect() {
	for _, e := range m.DeleteChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.DeleteChat with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteChatCounter) < 1 {
		if m.DeleteChatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.DeleteChat")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.DeleteChat with params: %#v", *m.DeleteChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteChat != nil && mm_atomic.LoadUint64(&m.afterDeleteChatCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.DeleteChat")
	}
}

type mChatServiceMockGetChat struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockGetChatExpectation
	expectations       []*ChatServiceMockGetChatExpectation

	callArgs []*ChatServiceMockGetChatParams
	mutex    sync.RWMutex
}

// ChatServiceMockGetChatExpectation specifies expectation struct of the ChatService.GetChat
type ChatServiceMockGetChatExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockGetChatParams
	results *ChatServiceMockGetChatResults
	Counter uint64
}

// ChatServiceMockGetChatParams contains parameters of the ChatService.GetChat
type ChatServiceMockGetChatParams struct {
	ctx context.Context
	id  int64
}

// ChatServiceMockGetChatResults contains results of the ChatService.GetChat
type ChatServiceMockGetChatResults struct {
	cp1 *model.Chat
	err error
}

// Expect sets up expected params for ChatService.GetChat
func (mmGetChat *mChatServiceMockGetChat) Expect(ctx context.Context, id int64) *mChatServiceMockGetChat {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("ChatServiceMock.GetChat mock is already set by Set")
	}

	if mmGetChat.defaultExpectation == nil {
		mmGetChat.defaultExpectation = &ChatServiceMockGetChatExpectation{}
	}

	mmGetChat.defaultExpectation.params = &ChatServiceMockGetChatParams{ctx, id}
	for _, e := range mmGetChat.expectations {
		if minimock.Equal(e.params, mmGetChat.defaultExpectation.params) {
			mmGetChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChat.defaultExpectation.params)
		}
	}

	return mmGetChat
}

// Inspect accepts an inspector function that has same arguments as the ChatService.GetChat
func (mmGetChat *mChatServiceMockGetChat) Inspect(f func(ctx context.Context, id int64)) *mChatServiceMockGetChat {
	if mmGetChat.mock.inspectFuncGetChat != nil {
		mmGetChat.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.GetChat")
	}

	mmGetChat.mock.inspectFuncGetChat = f

	return mmGetChat
}

// Return sets up results that will be returned by ChatService.GetChat
func (mmGetChat *mChatServiceMockGetChat) Return(cp1 *model.Chat, err error) *ChatServiceMock {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("ChatServiceMock.GetChat mock is already set by Set")
	}

	if mmGetChat.defaultExpectation == nil {
		mmGetChat.defaultExpectation = &ChatServiceMockGetChatExpectation{mock: mmGetChat.mock}
	}
	mmGetChat.defaultExpectation.results = &ChatServiceMockGetChatResults{cp1, err}
	return mmGetChat.mock
}

// Set uses given function f to mock the ChatService.GetChat method
func (mmGetChat *mChatServiceMockGetChat) Set(f func(ctx context.Context, id int64) (cp1 *model.Chat, err error)) *ChatServiceMock {
	if mmGetChat.defaultExpectation != nil {
		mmGetChat.mock.t.Fatalf("Default expectation is already set for the ChatService.GetChat method")
	}

	if len(mmGetChat.expectations) > 0 {
		mmGetChat.mock.t.Fatalf("Some expectations are already set for the ChatService.GetChat method")
	}

	mmGetChat.mock.funcGetChat = f
	return mmGetChat.mock
}

// When sets expectation for the ChatService.GetChat which will trigger the result defined by the following
// Then helper
func (mmGetChat *mChatServiceMockGetChat) When(ctx context.Context, id int64) *ChatServiceMockGetChatExpectation {
	if mmGetChat.mock.funcGetChat != nil {
		mmGetChat.mock.t.Fatalf("ChatServiceMock.GetChat mock is already set by Set")
	}

	expectation := &ChatServiceMockGetChatExpectation{
		mock:   mmGetChat.mock,
		params: &ChatServiceMockGetChatParams{ctx, id},
	}
	mmGetChat.expectations = append(mmGetChat.expectations, expectation)
	return expectation
}

// Then sets up ChatService.GetChat return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockGetChatExpectation) Then(cp1 *model.Chat, err error) *ChatServiceMock {
	e.results = &ChatServiceMockGetChatResults{cp1, err}
	return e.mock
}

// GetChat implements service.ChatService
func (mmGetChat *ChatServiceMock) GetChat(ctx context.Context, id int64) (cp1 *model.Chat, err error) {
	mm_atomic.AddUint64(&mmGetChat.beforeGetChatCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChat.afterGetChatCounter, 1)

	if mmGetChat.inspectFuncGetChat != nil {
		mmGetChat.inspectFuncGetChat(ctx, id)
	}

	mm_params := ChatServiceMockGetChatParams{ctx, id}

	// Record call args
	mmGetChat.GetChatMock.mutex.Lock()
	mmGetChat.GetChatMock.callArgs = append(mmGetChat.GetChatMock.callArgs, &mm_params)
	mmGetChat.GetChatMock.mutex.Unlock()

	for _, e := range mmGetChat.GetChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGetChat.GetChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChat.GetChatMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChat.GetChatMock.defaultExpectation.params
		mm_got := ChatServiceMockGetChatParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChat.t.Errorf("ChatServiceMock.GetChat got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChat.GetChatMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChat.t.Fatal("No results are set for the ChatServiceMock.GetChat")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGetChat.funcGetChat != nil {
		return mmGetChat.funcGetChat(ctx, id)
	}
	mmGetChat.t.Fatalf("Unexpected call to ChatServiceMock.GetChat. %v %v", ctx, id)
	return
}

// GetChatAfterCounter returns a count of finished ChatServiceMock.GetChat invocations
func (mmGetChat *ChatServiceMock) GetChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChat.afterGetChatCounter)
}

// GetChatBeforeCounter returns a count of ChatServiceMock.GetChat invocations
func (mmGetChat *ChatServiceMock) GetChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChat.beforeGetChatCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.GetChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChat *mChatServiceMockGetChat) Calls() []*ChatServiceMockGetChatParams {
	mmGetChat.mutex.RLock()

	argCopy := make([]*ChatServiceMockGetChatParams, len(mmGetChat.callArgs))
	copy(argCopy, mmGetChat.callArgs)

	mmGetChat.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatDone returns true if the count of the GetChat invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockGetChatDone() bool {
	for _, e := range m.GetChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChat != nil && mm_atomic.LoadUint64(&m.afterGetChatCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetChatInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockGetChatInspect() {
	for _, e := range m.GetChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.GetChat with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatCounter) < 1 {
		if m.GetChatMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.GetChat")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.GetChat with params: %#v", *m.GetChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChat != nil && mm_atomic.LoadUint64(&m.afterGetChatCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.GetChat")
	}
}

type mChatServiceMockGetChats struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockGetChatsExpectation
	expectations       []*ChatServiceMockGetChatsExpectation

	callArgs []*ChatServiceMockGetChatsParams
	mutex    sync.RWMutex
}

// ChatServiceMockGetChatsExpectation specifies expectation struct of the ChatService.GetChats
type ChatServiceMockGetChatsExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockGetChatsParams
	results *ChatServiceMockGetChatsResults
	Counter uint64
}

// ChatServiceMockGetChatsParams contains parameters of the ChatService.GetChats
type ChatServiceMockGetChatsParams struct {
	ctx context.Context
	in  *emptypb.Empty
}

// ChatServiceMockGetChatsResults contains results of the ChatService.GetChats
type ChatServiceMockGetChatsResults struct {
	ca1 []model.Chat
	err error
}

// Expect sets up expected params for ChatService.GetChats
func (mmGetChats *mChatServiceMockGetChats) Expect(ctx context.Context, in *emptypb.Empty) *mChatServiceMockGetChats {
	if mmGetChats.mock.funcGetChats != nil {
		mmGetChats.mock.t.Fatalf("ChatServiceMock.GetChats mock is already set by Set")
	}

	if mmGetChats.defaultExpectation == nil {
		mmGetChats.defaultExpectation = &ChatServiceMockGetChatsExpectation{}
	}

	mmGetChats.defaultExpectation.params = &ChatServiceMockGetChatsParams{ctx, in}
	for _, e := range mmGetChats.expectations {
		if minimock.Equal(e.params, mmGetChats.defaultExpectation.params) {
			mmGetChats.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChats.defaultExpectation.params)
		}
	}

	return mmGetChats
}

// Inspect accepts an inspector function that has same arguments as the ChatService.GetChats
func (mmGetChats *mChatServiceMockGetChats) Inspect(f func(ctx context.Context, in *emptypb.Empty)) *mChatServiceMockGetChats {
	if mmGetChats.mock.inspectFuncGetChats != nil {
		mmGetChats.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.GetChats")
	}

	mmGetChats.mock.inspectFuncGetChats = f

	return mmGetChats
}

// Return sets up results that will be returned by ChatService.GetChats
func (mmGetChats *mChatServiceMockGetChats) Return(ca1 []model.Chat, err error) *ChatServiceMock {
	if mmGetChats.mock.funcGetChats != nil {
		mmGetChats.mock.t.Fatalf("ChatServiceMock.GetChats mock is already set by Set")
	}

	if mmGetChats.defaultExpectation == nil {
		mmGetChats.defaultExpectation = &ChatServiceMockGetChatsExpectation{mock: mmGetChats.mock}
	}
	mmGetChats.defaultExpectation.results = &ChatServiceMockGetChatsResults{ca1, err}
	return mmGetChats.mock
}

// Set uses given function f to mock the ChatService.GetChats method
func (mmGetChats *mChatServiceMockGetChats) Set(f func(ctx context.Context, in *emptypb.Empty) (ca1 []model.Chat, err error)) *ChatServiceMock {
	if mmGetChats.defaultExpectation != nil {
		mmGetChats.mock.t.Fatalf("Default expectation is already set for the ChatService.GetChats method")
	}

	if len(mmGetChats.expectations) > 0 {
		mmGetChats.mock.t.Fatalf("Some expectations are already set for the ChatService.GetChats method")
	}

	mmGetChats.mock.funcGetChats = f
	return mmGetChats.mock
}

// When sets expectation for the ChatService.GetChats which will trigger the result defined by the following
// Then helper
func (mmGetChats *mChatServiceMockGetChats) When(ctx context.Context, in *emptypb.Empty) *ChatServiceMockGetChatsExpectation {
	if mmGetChats.mock.funcGetChats != nil {
		mmGetChats.mock.t.Fatalf("ChatServiceMock.GetChats mock is already set by Set")
	}

	expectation := &ChatServiceMockGetChatsExpectation{
		mock:   mmGetChats.mock,
		params: &ChatServiceMockGetChatsParams{ctx, in},
	}
	mmGetChats.expectations = append(mmGetChats.expectations, expectation)
	return expectation
}

// Then sets up ChatService.GetChats return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockGetChatsExpectation) Then(ca1 []model.Chat, err error) *ChatServiceMock {
	e.results = &ChatServiceMockGetChatsResults{ca1, err}
	return e.mock
}

// GetChats implements service.ChatService
func (mmGetChats *ChatServiceMock) GetChats(ctx context.Context, in *emptypb.Empty) (ca1 []model.Chat, err error) {
	mm_atomic.AddUint64(&mmGetChats.beforeGetChatsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChats.afterGetChatsCounter, 1)

	if mmGetChats.inspectFuncGetChats != nil {
		mmGetChats.inspectFuncGetChats(ctx, in)
	}

	mm_params := ChatServiceMockGetChatsParams{ctx, in}

	// Record call args
	mmGetChats.GetChatsMock.mutex.Lock()
	mmGetChats.GetChatsMock.callArgs = append(mmGetChats.GetChatsMock.callArgs, &mm_params)
	mmGetChats.GetChatsMock.mutex.Unlock()

	for _, e := range mmGetChats.GetChatsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ca1, e.results.err
		}
	}

	if mmGetChats.GetChatsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChats.GetChatsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChats.GetChatsMock.defaultExpectation.params
		mm_got := ChatServiceMockGetChatsParams{ctx, in}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChats.t.Errorf("ChatServiceMock.GetChats got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChats.GetChatsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChats.t.Fatal("No results are set for the ChatServiceMock.GetChats")
		}
		return (*mm_results).ca1, (*mm_results).err
	}
	if mmGetChats.funcGetChats != nil {
		return mmGetChats.funcGetChats(ctx, in)
	}
	mmGetChats.t.Fatalf("Unexpected call to ChatServiceMock.GetChats. %v %v", ctx, in)
	return
}

// GetChatsAfterCounter returns a count of finished ChatServiceMock.GetChats invocations
func (mmGetChats *ChatServiceMock) GetChatsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChats.afterGetChatsCounter)
}

// GetChatsBeforeCounter returns a count of ChatServiceMock.GetChats invocations
func (mmGetChats *ChatServiceMock) GetChatsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChats.beforeGetChatsCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.GetChats.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChats *mChatServiceMockGetChats) Calls() []*ChatServiceMockGetChatsParams {
	mmGetChats.mutex.RLock()

	argCopy := make([]*ChatServiceMockGetChatsParams, len(mmGetChats.callArgs))
	copy(argCopy, mmGetChats.callArgs)

	mmGetChats.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatsDone returns true if the count of the GetChats invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockGetChatsDone() bool {
	for _, e := range m.GetChatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChats != nil && mm_atomic.LoadUint64(&m.afterGetChatsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetChatsInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockGetChatsInspect() {
	for _, e := range m.GetChatsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.GetChats with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetChatsCounter) < 1 {
		if m.GetChatsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.GetChats")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.GetChats with params: %#v", *m.GetChatsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChats != nil && mm_atomic.LoadUint64(&m.afterGetChatsCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.GetChats")
	}
}

type mChatServiceMockGetName struct {
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockGetNameExpectation
	expectations       []*ChatServiceMockGetNameExpectation

	callArgs []*ChatServiceMockGetNameParams
	mutex    sync.RWMutex
}

// ChatServiceMockGetNameExpectation specifies expectation struct of the ChatService.GetName
type ChatServiceMockGetNameExpectation struct {
	mock    *ChatServiceMock
	params  *ChatServiceMockGetNameParams
	results *ChatServiceMockGetNameResults
	Counter uint64
}

// ChatServiceMockGetNameParams contains parameters of the ChatService.GetName
type ChatServiceMockGetNameParams struct {
	ctx context.Context
}

// ChatServiceMockGetNameResults contains results of the ChatService.GetName
type ChatServiceMockGetNameResults struct {
	s1  string
	err error
}

// Expect sets up expected params for ChatService.GetName
func (mmGetName *mChatServiceMockGetName) Expect(ctx context.Context) *mChatServiceMockGetName {
	if mmGetName.mock.funcGetName != nil {
		mmGetName.mock.t.Fatalf("ChatServiceMock.GetName mock is already set by Set")
	}

	if mmGetName.defaultExpectation == nil {
		mmGetName.defaultExpectation = &ChatServiceMockGetNameExpectation{}
	}

	mmGetName.defaultExpectation.params = &ChatServiceMockGetNameParams{ctx}
	for _, e := range mmGetName.expectations {
		if minimock.Equal(e.params, mmGetName.defaultExpectation.params) {
			mmGetName.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetName.defaultExpectation.params)
		}
	}

	return mmGetName
}

// Inspect accepts an inspector function that has same arguments as the ChatService.GetName
func (mmGetName *mChatServiceMockGetName) Inspect(f func(ctx context.Context)) *mChatServiceMockGetName {
	if mmGetName.mock.inspectFuncGetName != nil {
		mmGetName.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.GetName")
	}

	mmGetName.mock.inspectFuncGetName = f

	return mmGetName
}

// Return sets up results that will be returned by ChatService.GetName
func (mmGetName *mChatServiceMockGetName) Return(s1 string, err error) *ChatServiceMock {
	if mmGetName.mock.funcGetName != nil {
		mmGetName.mock.t.Fatalf("ChatServiceMock.GetName mock is already set by Set")
	}

	if mmGetName.defaultExpectation == nil {
		mmGetName.defaultExpectation = &ChatServiceMockGetNameExpectation{mock: mmGetName.mock}
	}
	mmGetName.defaultExpectation.results = &ChatServiceMockGetNameResults{s1, err}
	return mmGetName.mock
}

// Set uses given function f to mock the ChatService.GetName method
func (mmGetName *mChatServiceMockGetName) Set(f func(ctx context.Context) (s1 string, err error)) *ChatServiceMock {
	if mmGetName.defaultExpectation != nil {
		mmGetName.mock.t.Fatalf("Default expectation is already set for the ChatService.GetName method")
	}

	if len(mmGetName.expectations) > 0 {
		mmGetName.mock.t.Fatalf("Some expectations are already set for the ChatService.GetName method")
	}

	mmGetName.mock.funcGetName = f
	return mmGetName.mock
}

// When sets expectation for the ChatService.GetName which will trigger the result defined by the following
// Then helper
func (mmGetName *mChatServiceMockGetName) When(ctx context.Context) *ChatServiceMockGetNameExpectation {
	if mmGetName.mock.funcGetName != nil {
		mmGetName.mock.t.Fatalf("ChatServiceMock.GetName mock is already set by Set")
	}

	expectation := &ChatServiceMockGetNameExpectation{
		mock:   mmGetName.mock,
		params: &ChatServiceMockGetNameParams{ctx},
	}
	mmGetName.expectations = append(mmGetName.expectations, expectation)
	return expectation
}

// Then sets up ChatService.GetName return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockGetNameExpectation) Then(s1 string, err error) *ChatServiceMock {
	e.results = &ChatServiceMockGetNameResults{s1, err}
	return e.mock
}

// GetName implements service.ChatService
func (mmGetName *ChatServiceMock) GetName(ctx context.Context) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGetName.beforeGetNameCounter, 1)
	defer mm_atomic.AddUint64(&mmGetName.afterGetNameCounter, 1)

	if mmGetName.inspectFuncGetName != nil {
		mmGetName.inspectFuncGetName(ctx)
	}

	mm_params := ChatServiceMockGetNameParams{ctx}

	// Record call args
	mmGetName.GetNameMock.mutex.Lock()
	mmGetName.GetNameMock.callArgs = append(mmGetName.GetNameMock.callArgs, &mm_params)
	mmGetName.GetNameMock.mutex.Unlock()

	for _, e := range mmGetName.GetNameMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGetName.GetNameMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetName.GetNameMock.defaultExpectation.Counter, 1)
		mm_want := mmGetName.GetNameMock.defaultExpectation.params
		mm_got := ChatServiceMockGetNameParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetName.t.Errorf("ChatServiceMock.GetName got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetName.GetNameMock.defaultExpectation.results
		if mm_results == nil {
			mmGetName.t.Fatal("No results are set for the ChatServiceMock.GetName")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGetName.funcGetName != nil {
		return mmGetName.funcGetName(ctx)
	}
	mmGetName.t.Fatalf("Unexpected call to ChatServiceMock.GetName. %v", ctx)
	return
}

// GetNameAfterCounter returns a count of finished ChatServiceMock.GetName invocations
func (mmGetName *ChatServiceMock) GetNameAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetName.afterGetNameCounter)
}

// GetNameBeforeCounter returns a count of ChatServiceMock.GetName invocations
func (mmGetName *ChatServiceMock) GetNameBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetName.beforeGetNameCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.GetName.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetName *mChatServiceMockGetName) Calls() []*ChatServiceMockGetNameParams {
	mmGetName.mutex.RLock()

	argCopy := make([]*ChatServiceMockGetNameParams, len(mmGetName.callArgs))
	copy(argCopy, mmGetName.callArgs)

	mmGetName.mutex.RUnlock()

	return argCopy
}

// MinimockGetNameDone returns true if the count of the GetName invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockGetNameDone() bool {
	for _, e := range m.GetNameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNameCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetName != nil && mm_atomic.LoadUint64(&m.afterGetNameCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNameInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockGetNameInspect() {
	for _, e := range m.GetNameMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.GetName with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNameMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNameCounter) < 1 {
		if m.GetNameMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.GetName")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.GetName with params: %#v", *m.GetNameMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetName != nil && mm_atomic.LoadUint64(&m.afterGetNameCounter) < 1 {
		m.t.Error("Expected call to ChatServiceMock.GetName")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockCreateChatInspect()

			m.MinimockDeleteChatInspect()

			m.MinimockGetChatInspect()

			m.MinimockGetChatsInspect()

			m.MinimockGetNameInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockCreateChatDone() &&
		m.MinimockDeleteChatDone() &&
		m.MinimockGetChatDone() &&
		m.MinimockGetChatsDone() &&
		m.MinimockGetNameDone()
}
